<?php

namespace HedgeComm\EmailBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SubscriberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriberRepository extends EntityRepository
{

	public function deleteSubscribers($subscribers)
	{
		$em = $this->getEntityManager();

		if (!is_array($subscribers)) 
		{
			$subscribers = array($subscribers);
		}

		foreach ($subscribers as $subscriber)
		{
			$em->remove($subscriber);
			$em->flush();
		}
	}
	
	public function checkSubscriberExists($email, $client, $subscriberList)
	{	
		$count = 0;
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT s.id FROM HedgeCommEmailBundle:Subscriber s WHERE s.email=?1 AND s.client=?2 AND s.subscriberList=?3')
			->setParameter('1', $email)
			->setParameter('2', $client->getId())
			->setParameter('3', $subscriberList->getId());
		$result = $query->getResult();
		$count = count($result);
		if ($count > 0)
		{
			return TRUE;
		} else
		{
			return FALSE;
		}
/*
		$subscribers = $em->getRepository('HedgeCommEmailBundle:Subscriber')->findBy(array(
			'email' => $email,
			'client' => $client->getId(),
			'subscriberList' => $subscriberList->getId(),
		));
		if (count($subscribers))
		{
			return TRUE;
		} else
		{
			return FALSE;
		}
*/
	}
	
	public function addSubscribers($subscribers, $client, $subscriberList)
	{
	
		if (isset($subscribers['email']))
		{
			$subscribers = array($subscribers);
		}
	
		$em = $this->getEntityManager();
		
		foreach ($subscribers as $values)
		{
			$email = trim($values['email']);
			$exists = $this->checkSubscriberExists($email, $client, $subscriberList);
			if (!$exists)
			{
				$subscriber = new Subscriber();
				if (isset($values['name']))
				{
					$subscriber->setName($values['name']);
				}
				$subscriber->setEmail($email);
		        $subscriber->setTimeStamp(time());
		        $subscriber->setClient($client);
		        $subscriber->setSubscriberList($subscriberList);
		        $subscriber->setUnsubscribed(0);
		        $em->persist($subscriber);
		        $em->flush();
			}
		}
	}

}
