<?php

namespace HedgeComm\EmailBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * SubscriberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriberRepository extends EntityRepository
{

	/**
	 * Delete subscribers
	 *
	 * @param array(Subscribers) $subscribers
	 *
	 */
	public function deleteSubscribers($subscribers)
	{
		$em = $this->getEntityManager();

		if (!is_array($subscribers)) 
		{
			$subscribers = array($subscribers);
		}

		foreach ($subscribers as $subscriber)
		{
			$em->remove($subscriber);
			$em->flush();
		}
	}

	/**
	 * Check if an email address is already subscribed
	 * in list and for client
	 *
	 * @param string $email
	 * @param Client $client
	 * @param SubscriberList $subscriberList
	 *
	 */	
	public function checkSubscriberExists($email, $client, $subscriberList)
	{	
		$count = 0;
		$em = $this->getEntityManager();
		$query = $em->createQuery('SELECT s.id FROM HedgeCommEmailBundle:Subscriber s WHERE s.email=?1 AND s.client=?2 AND s.subscriberList=?3')
			->setParameter('1', $email)
			->setParameter('2', $client->getId())
			->setParameter('3', $subscriberList->getId());
		$result = $query->getResult();
		$count = count($result);
		if ($count > 0)
		{
			return TRUE;
		} else
		{
			return FALSE;
		}
	}
	
	/**
	 * Add subscribers
	 *
	 * @param array $subscribers
	 * @param Client $client
	 * @param SubscriberList $subscriberList
	 *
	 */
	public function addSubscribers($subscribers, $client, $subscriberList)
	{
	
		$countSubscribed = 0;
		$countDuplicate = 0;
		
		if (isset($subscribers['email']))
		{
			$subscribers = array($subscribers);
		}
	
		$em = $this->getEntityManager();
		
		foreach ($subscribers as $values)
		{
			$email = trim($values['email']);
			$exists = $this->checkSubscriberExists($email, $client, $subscriberList);
			if (!$exists)
			{
				$countSubscribed++;
				$subscriber = new Subscriber();
				if (isset($values['name']))
				{
					$subscriber->setName($values['name']);
				}
				$subscriber->setEmail($email);
		        $subscriber->setTimeStamp(time());
		        $subscriber->setClient($client);
		        $subscriber->setSubscriberList($subscriberList);
		        $subscriber->setUnsubscribed(0);
		        $em->persist($subscriber);
		        $em->flush();
			} else
			{
				$countDuplicate++;
			}
		}
		$result = array('subscribed' => $countSubscribed, 'duplicate' => $countDuplicate);
		return $result;
	}

	/**
	 * Unsubscribe existing subscriber
	 *
	 * @param Subscriber $subscriber
	 *
	 */
	public function unsubscribeSubscriber($subscriber)
	{
		$em = $this->getEntityManager();
		$subscriber->setUnsubscribed(1);
		$em->flush();
	}

	/**
	 * Resubscribe existing subscriber
	 *
	 * @param Subscriber $subscriber
	 *
	 */
	public function resubscribeSubscriber($subscriber)
	{
		$em = $this->getEntityManager();
		$subscriber->setUnsubscribed(0);
		$em->flush();
	}

	/**
	 * Toggle subscribers status
	 *
	 * @param array $subscribers
	 *
	 */
	 public function toggleSubscriberStatus($subscribers)
	 {
	 	if (!is_array($subscribers))
	 	{
	 		$subscribers = array($subscribers);
	 	}
	 	
	 	$countResubscribed = 0;
	 	$countUnsubscribed = 0;
	 	
	 	foreach ($subscribers as $subscriber)
	 	{
	 		$currentStatus = $subscriber->getUnsubscribed();
	 		if ($currentStatus == 1) // currently unsubscribed
	 		{
	 			$this->resubscribeSubscriber($subscriber);
	 			$countResubscribed++;
	 		} else
	 		{
	 			$this->unsubscribeSubscriber($subscriber);
	 			$countUnsubscribed++;
	 		}
	 	}
	 	$message = $countUnsubscribed . " subscriber(s) UNsubscribed - " . $countResubscribed . " subscriber(s) REsubscribed";
	 	return $message;
	 }
	
}
